import java_cup.runtime.*;

parser code {:
    public Laxer laxer;
    public parser (Laxer laxer){
        this.laxer = laxer;
    }
    @Override
    protected void report_expected_token_ids(){ }
:}
scan with {:return laxer.next_token();:}
init with {::}


/* terminals */

//reserved Words terminals
terminal VOID, INT, DOUBLE,BOOL,STRING;
terminal CLASS, INTERFACE, NULL, THIS, EXTENDS;
terminal IMPLEMENTS, FOR, WHILE, IF, ELSE;
terminal RETURN, BREAK, NEW, NEWARRAY, PRINT;
terminal READINTEGER, READLINE,DTOI,ITOD, BTOI,ITOB;
terminal PRIVATE, PROTECTED,PUBLIC, CONTINUE;


//condition Symbols
terminal EQUAL, NOTEQUAL, LESSEQUAL, LESS, GREATER, GREATEREQUAL;
terminal AND,NOT,OR;

//Arithmitic symbols
terminal DIV, PROD, ADD,MINUS,MOD;

//other symbols
terminal ASSIGN, COLON, COMMA, LBRACK,RBRACK , LRBRACK; // BRACK []
terminal DOT,LBRACES, RBRACES, LCURLY, RCURLY;// BRACES () CURLY{}

// identifier
terminal ID;

//constants 
terminal INTCONST, HEXCONST, DOUBLECONST, STRINGCONST,TRUE,FALSE;

/**/

/* Non terminals */

//whole program nonterminal
nonterminal program;
// declarations
nonterminal decl;
// Types of declarations
nonterminal variableDecl, functionDecl, classDecl, interfaceDecl;
nonterminal variableDecl_plus;
// define variable
nonterminal variable;
// types of definitions except void
nonterminal type;
// args of functions
nonterminal formals;
//statement block
nonterminal stmtBlock;
// methods and variables in class
nonterminal field;
nonterminal field_plus;
//public or private of protected
nonterminal accessMode;
//protoypes in interface
nonterminal prototype;
nonterminal prototype_plus;
// id1, id2, .... (minimum 1 id)
nonterminal id_plus;
//statement
nonterminal stmt;
nonterminal stmt_plus;
//IF and While and for
nonterminal ifStmt , whileStmt , forStmt;
// break continue return print
nonterminal breakStmt , continueStmt ,returnStmt ,printStmt;
//expressions
nonterminal expr;
nonterminal expr_plus;

nonterminal lValue;

nonterminal constant;

nonterminal call;

nonterminal actuals;



/**/

/* precedence  */
precedence left COMMA;
precedence nonassoc ASSIGN;
precedence left AND, OR ;
precedence left EQUAL, NOTEQUAL ;
precedence left LESS, LESSEQUAL, GREATER, GREATEREQUAL;
precedence left ADD, MINUS;
precedence left PROD, DIV, MOD;
precedence right NOT;
precedence right LBRACES, RBRACES,LBRACK,RBRACK;
/**/

start with program;

program  ::= program decl
           | decl;

decl ::= variableDecl
       | functionDecl
       | classDecl
       | interfaceDecl ;

variableDecl ::= variable COLON;

variableDecl_plus ::= variableDecl_plus variableDecl
                    | variableDecl;

variable ::= type ID;

type ::= INT
       | DOUBLE
       | BOOL
       | STRING
       | ID
       | type LRBRACK;

functionDecl ::= type ID LBRACES formals RBRACES stmtBlock
               | VOID ID LBRACES formals RBRACES stmtBlock
               | type ID LBRACES RBRACES stmtBlock
               | VOID ID LBRACES RBRACES stmtBlock;

formals ::=  variable COMMA formals
           | variable  ;

classDecl ::= CLASS ID LCURLY field_plus  RCURLY
            | CLASS ID EXTENDS ID LCURLY field_plus RCURLY
            | CLASS ID IMPLEMENTS id_plus  LCURLY field_plus  RCURLY
            | CLASS ID EXTENDS ID IMPLEMENTS id_plus LCURLY field_plus RCURLY
            | CLASS ID LCURLY RCURLY
            | CLASS ID EXTENDS ID LCURLY RCURLY
            | CLASS ID IMPLEMENTS id_plus  LCURLY RCURLY
            | CLASS ID EXTENDS ID IMPLEMENTS id_plus LCURLY RCURLY;

id_plus ::= ID
          | ID COMMA id_plus ;

field_plus ::= field_plus field
             | field;

field ::= accessMode variableDecl
        | variableDecl
        | accessMode functionDecl
        | functionDecl;

accessMode ::= PRIVATE | PROTECTED | PUBLIC  ;

interfaceDecl ::= INTERFACE ID LCURLY RCURLY
                | INTERFACE ID LCURLY prototype_plus RCURLY;

prototype_plus ::= prototype_plus prototype
                 | prototype;
prototype ::= type ID LBRACES formals RBRACES COLON
             | VOID ID LBRACES formals RBRACES COLON
             | type ID LBRACES RBRACES COLON
             | VOID ID LBRACES RBRACES COLON;

stmtBlock ::= LCURLY RCURLY
            | LCURLY variableDecl_plus RCURLY
            | LCURLY stmt_plus RCURLY
            | LCURLY variableDecl_plus stmt_plus RCURLY;

stmt_plus ::= stmt_plus stmt
            | stmt;

stmt ::= expr COLON | COLON | ifStmt | whileStmt | forStmt
            | breakStmt | continueStmt | returnStmt | printStmt
            | stmtBlock ;

ifStmt ::= IF LBRACES expr RBRACES  stmt
         | IF LBRACES expr RBRACES stmt ELSE stmt;

whileStmt::= WHILE LBRACES expr RBRACES stmt;

forStmt ::= FOR LBRACES COLON expr COLON RBRACES stmt
          | FOR LBRACES expr COLON expr COLON RBRACES stmt
          | FOR LBRACES  COLON expr COLON expr RBRACES stmt
          | FOR LBRACES expr COLON expr COLON expr RBRACES stmt;

returnStmt ::= RETURN COLON
             | RETURN expr COLON;

breakStmt ::= BREAK COLON;

continueStmt ::= CONTINUE COLON;

printStmt ::= PRINT LBRACES expr_plus RBRACES COLON;

expr_plus ::= expr COMMA expr
            | expr ;


expr ::= lValue ASSIGN expr | constant | lValue
        | THIS | call | LBRACES expr RBRACES
        | expr ADD expr | expr MINUS expr | expr PROD expr
        | expr DIV expr | expr MOD expr | MINUS expr
        | expr LESS expr | expr LESSEQUAL expr
        | expr GREATER expr | expr GREATEREQUAL expr
        | expr EQUAL expr | expr NOTEQUAL expr
        | expr AND expr | expr OR expr | NOT expr
        | READINTEGER LBRACES RBRACES
        | READLINE LBRACES RBRACES
        | NEW ID | NEWARRAY LBRACES expr COMMA type RBRACES
        | ITOD LBRACES expr RBRACES | DTOI LBRACES expr RBRACES
        | ITOB LBRACES expr RBRACES | BTOI LBRACES expr RBRACES;

lValue ::= ID | expr DOT ID | expr LBRACK expr RBRACK;

call ::= ID LBRACES actuals RBRACES | expr DOT ID LBRACES actuals RBRACES
         ID LBRACES  RBRACES | expr DOT ID LBRACES RBRACES;

actuals ::= expr_plus;

constant ::= INTCONST | DOUBLECONST | HEXCONST | TRUE
           | FALSE | STRINGCONST | NULL;


