package Scanner;
/* The following code was generated by JFlex 1.7.0 */

import java.io.*;


import Parser.sym;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\5\1\7\1\1\1\0\1\7\1\6\16\5\4\0\1\7\1\61" +
                    "\1\20\1\0\1\4\1\67\1\64\1\0\1\71\1\72\1\3\1\66" +
                    "\1\70\1\17\1\15\1\2\1\11\11\10\1\0\1\65\1\62\1\60" +
                    "\1\63\2\0\1\52\3\13\1\16\1\13\2\4\1\56\2\4\1\57" +
                    "\1\4\1\51\1\4\1\54\1\4\1\55\5\4\1\12\2\4\1\21" +
                    "\1\0\1\22\1\0\1\4\1\0\1\41\1\32\1\40\1\26\1\34" +
                    "\1\42\1\37\1\43\1\25\1\4\1\50\1\33\1\45\1\27\1\24" +
                    "\1\46\1\4\1\36\1\35\1\30\1\31\1\23\1\47\1\44\1\53" +
                    "\1\4\1\73\1\75\1\74\1\0\41\5\2\0\4\4\4\0\1\4" +
                    "\2\0\1\5\7\0\1\4\4\0\1\4\5\0\27\4\1\0\37\4" +
                    "\1\0\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0\1\4" +
                    "\21\0\160\5\5\4\1\0\2\4\2\0\4\4\1\0\1\4\6\0" +
                    "\1\4\1\0\3\4\1\0\1\4\1\0\24\4\1\0\123\4\1\0" +
                    "\213\4\1\0\5\5\2\0\246\4\1\0\46\4\2\0\1\4\7\0" +
                    "\47\4\7\0\1\4\1\0\55\5\1\0\1\5\1\0\2\5\1\0" +
                    "\2\5\1\0\1\5\10\0\33\4\5\0\3\4\15\0\6\5\5\0" +
                    "\1\4\4\0\13\5\1\0\1\5\3\0\53\4\25\5\12\14\4\0" +
                    "\2\4\1\5\143\4\1\0\1\4\10\5\1\0\6\5\2\4\2\5" +
                    "\1\0\4\5\2\4\12\14\3\4\2\0\1\4\17\0\1\5\1\4" +
                    "\1\5\36\4\33\5\2\0\131\4\13\5\1\4\16\0\12\14\41\4" +
                    "\11\5\2\4\4\0\1\4\5\0\26\4\4\5\1\4\11\5\1\4" +
                    "\3\5\1\4\5\5\22\0\31\4\3\5\4\0\13\4\65\0\25\4" +
                    "\1\0\10\4\26\0\60\5\66\4\3\5\1\4\22\5\1\4\7\5" +
                    "\12\4\2\5\2\0\12\14\1\0\20\4\3\5\1\0\10\4\2\0" +
                    "\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0\4\4\2\0" +
                    "\1\5\1\4\7\5\2\0\2\5\2\0\3\5\1\4\10\0\1\5" +
                    "\4\0\2\4\1\0\3\4\2\5\2\0\12\14\4\4\7\0\2\4" +
                    "\4\0\3\5\1\0\6\4\4\0\2\4\2\0\26\4\1\0\7\4" +
                    "\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\5\1\0\5\5" +
                    "\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\4\1\0\1\4" +
                    "\7\0\12\14\2\5\3\4\1\5\13\0\3\5\1\0\11\4\1\0" +
                    "\3\4\1\0\26\4\1\0\7\4\1\0\2\4\1\0\5\4\2\0" +
                    "\1\5\1\4\10\5\1\0\3\5\1\0\3\5\2\0\1\4\17\0" +
                    "\2\4\2\5\2\0\12\14\1\0\1\4\7\0\1\4\6\5\1\0" +
                    "\3\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0" +
                    "\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0\2\5\2\0" +
                    "\3\5\10\0\2\5\4\0\2\4\1\0\3\4\2\5\2\0\12\14" +
                    "\1\0\1\4\20\0\1\5\1\4\1\0\6\4\3\0\3\4\1\0" +
                    "\4\4\3\0\2\4\1\0\1\4\1\0\2\4\3\0\2\4\3\0" +
                    "\3\4\3\0\14\4\4\0\5\5\3\0\3\5\1\0\4\5\2\0" +
                    "\1\4\6\0\1\5\16\0\12\14\11\0\1\4\6\0\4\5\1\0" +
                    "\10\4\1\0\3\4\1\0\27\4\1\0\20\4\3\0\1\4\7\5" +
                    "\1\0\3\5\1\0\4\5\7\0\2\5\1\0\3\4\5\0\2\4" +
                    "\2\5\2\0\12\14\20\0\1\4\3\5\1\0\10\4\1\0\3\4" +
                    "\1\0\27\4\1\0\12\4\1\0\5\4\2\0\1\5\1\4\7\5" +
                    "\1\0\3\5\1\0\4\5\7\0\2\5\7\0\1\4\1\0\2\4" +
                    "\2\5\2\0\12\14\1\0\2\4\15\0\4\5\1\0\10\4\1\0" +
                    "\3\4\1\0\51\4\2\5\1\4\7\5\1\0\3\5\1\0\4\5" +
                    "\1\4\5\0\3\4\1\5\7\0\3\4\2\5\2\0\12\14\12\0" +
                    "\6\4\2\0\2\5\1\0\22\4\3\0\30\4\1\0\11\4\1\0" +
                    "\1\4\2\0\7\4\3\0\1\5\4\0\6\5\1\0\1\5\1\0" +
                    "\10\5\6\0\12\14\2\0\2\5\15\0\60\4\1\5\2\4\7\5" +
                    "\4\0\10\4\10\5\1\0\12\14\47\0\2\4\1\0\1\4\2\0" +
                    "\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\7\4\1\0" +
                    "\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\4\4\1\5" +
                    "\2\4\6\5\1\0\2\5\1\4\2\0\5\4\1\0\1\4\1\0" +
                    "\6\5\2\0\12\14\2\0\4\4\40\0\1\4\27\0\2\5\6\0" +
                    "\12\14\13\0\1\5\1\0\1\5\1\0\1\5\4\0\2\5\10\4" +
                    "\1\0\44\4\4\0\24\5\1\0\2\5\5\4\13\5\1\0\44\5" +
                    "\11\0\1\5\71\0\53\4\24\5\1\4\12\14\6\0\6\4\4\5" +
                    "\4\4\3\5\1\4\3\5\2\4\7\5\3\4\4\5\15\4\14\5" +
                    "\1\4\1\5\12\14\4\5\2\0\46\4\1\0\1\4\5\0\1\4" +
                    "\2\0\53\4\1\0\u014d\4\1\0\4\4\2\0\7\4\1\0\1\4" +
                    "\1\0\4\4\2\0\51\4\1\0\4\4\2\0\41\4\1\0\4\4" +
                    "\2\0\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0\71\4" +
                    "\1\0\4\4\2\0\103\4\2\0\3\5\40\0\20\4\20\0\126\4" +
                    "\2\0\6\4\3\0\u026c\4\2\0\21\4\1\0\32\4\5\0\113\4" +
                    "\3\0\13\4\7\0\15\4\1\0\4\4\3\5\13\0\22\4\3\5" +
                    "\13\0\22\4\2\5\14\0\15\4\1\0\3\4\1\0\2\5\14\0" +
                    "\64\4\40\5\3\0\1\4\3\0\2\4\1\5\2\0\12\14\41\0" +
                    "\4\5\1\0\12\14\6\0\130\4\10\0\5\4\2\5\42\4\1\5" +
                    "\1\4\5\0\106\4\12\0\37\4\1\0\14\5\4\0\14\5\12\0" +
                    "\12\14\36\4\2\0\5\4\13\0\54\4\4\0\32\4\6\0\12\14" +
                    "\46\0\27\4\5\5\4\0\65\4\12\5\1\0\35\5\2\0\1\5" +
                    "\12\14\6\0\12\14\15\0\1\4\10\0\16\5\102\0\5\5\57\4" +
                    "\21\5\7\4\4\0\12\14\21\0\11\5\14\0\3\5\36\4\15\5" +
                    "\2\4\12\14\54\4\16\5\14\0\44\4\24\5\10\0\12\14\3\0" +
                    "\3\4\12\14\44\4\2\0\11\4\107\0\3\5\1\0\25\5\4\4" +
                    "\1\5\4\4\3\5\2\4\3\5\6\0\300\4\72\5\1\0\5\5" +
                    "\u0116\4\2\0\6\4\2\0\46\4\2\0\6\4\2\0\10\4\1\0" +
                    "\1\4\1\0\1\4\1\0\1\4\1\0\37\4\2\0\65\4\1\0" +
                    "\7\4\1\0\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0" +
                    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\16\0\5\5\32\0" +
                    "\5\5\20\0\2\4\23\0\1\4\13\0\5\5\1\0\12\5\1\0" +
                    "\1\4\15\0\1\4\20\0\15\4\3\0\40\4\20\0\15\5\4\0" +
                    "\1\5\3\0\14\5\21\0\1\4\4\0\1\4\2\0\12\4\1\0" +
                    "\1\4\3\0\5\4\6\0\1\4\1\0\1\4\1\0\1\4\1\0" +
                    "\4\4\1\0\13\4\2\0\4\4\5\0\5\4\4\0\1\4\21\0" +
                    "\51\4\u0a77\0\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\5" +
                    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0\70\4\7\0" +
                    "\1\4\17\0\1\5\27\4\11\0\7\4\1\0\7\4\1\0\7\4" +
                    "\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0\7\4" +
                    "\1\0\40\5\57\0\1\4\u01d5\0\3\4\31\0\11\4\6\5\1\0" +
                    "\5\4\2\0\5\4\4\0\126\4\2\0\2\5\2\0\3\4\1\0" +
                    "\132\4\1\0\4\4\5\0\52\4\2\0\136\4\21\0\33\4\65\0" +
                    "\20\4\u0200\0\u19b6\4\112\0\u51eb\4\25\0\u048d\4\103\0\56\4\2\0" +
                    "\u010d\4\3\0\20\4\12\14\2\4\24\0\57\4\1\5\4\0\12\5" +
                    "\1\0\37\4\2\5\120\4\2\5\45\0\11\4\2\0\147\4\2\0" +
                    "\44\4\1\0\10\4\77\0\13\4\1\5\3\4\1\5\4\4\1\5" +
                    "\27\4\5\5\20\0\1\4\7\0\64\4\14\0\2\5\62\4\22\5" +
                    "\12\0\12\14\6\0\22\5\6\4\3\0\1\4\1\0\1\4\2\0" +
                    "\12\14\34\4\10\5\2\0\27\4\15\5\14\0\35\4\3\0\4\5" +
                    "\57\4\16\5\16\0\1\4\12\14\6\0\5\4\1\5\12\4\12\14" +
                    "\5\4\1\0\51\4\16\5\11\0\3\4\1\5\10\4\2\5\2\0" +
                    "\12\14\6\0\27\4\3\0\1\4\3\5\62\4\1\5\1\4\3\5" +
                    "\2\4\2\5\5\4\2\5\1\4\1\5\1\4\30\0\3\4\2\0" +
                    "\13\4\5\5\2\0\3\4\2\5\12\0\6\4\2\0\6\4\2\0" +
                    "\6\4\11\0\7\4\1\0\7\4\1\0\53\4\1\0\12\4\12\0" +
                    "\163\4\10\5\1\0\2\5\2\0\12\14\6\0\u2ba4\4\14\0\27\4" +
                    "\4\0\61\4\u2104\0\u016e\4\2\0\152\4\46\0\7\4\14\0\5\4" +
                    "\5\0\1\4\1\5\12\4\1\0\15\4\1\0\5\4\1\0\1\4" +
                    "\1\0\2\4\1\0\2\4\1\0\154\4\41\0\u016b\4\22\0\100\4" +
                    "\2\0\66\4\50\0\15\4\3\0\20\5\20\0\20\5\3\0\2\4" +
                    "\30\0\3\4\31\0\1\4\6\0\5\4\1\0\207\4\2\0\1\5" +
                    "\4\0\1\4\13\0\12\14\7\0\32\4\4\0\1\4\1\0\32\4" +
                    "\13\0\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0\3\4" +
                    "\3\0\2\4\3\0\2\4\22\0\3\5\4\0\14\4\1\0\32\4" +
                    "\1\0\23\4\1\0\2\4\1\0\17\4\2\0\16\4\42\0\173\4" +
                    "\105\0\65\4\210\0\1\5\202\0\35\4\3\0\61\4\17\0\1\5" +
                    "\37\0\40\4\15\0\36\4\5\0\46\4\5\5\5\0\36\4\2\0" +
                    "\44\4\4\0\10\4\1\0\5\4\52\0\236\4\2\0\12\14\6\0" +
                    "\44\4\4\0\44\4\4\0\50\4\10\0\64\4\234\0\u0137\4\11\0" +
                    "\26\4\12\0\10\4\230\0\6\4\2\0\1\4\1\0\54\4\1\0" +
                    "\2\4\3\0\1\4\2\0\27\4\12\0\27\4\11\0\37\4\101\0" +
                    "\23\4\1\0\2\4\12\0\26\4\12\0\32\4\106\0\70\4\6\0" +
                    "\2\4\100\0\1\4\3\5\1\0\2\5\5\0\4\5\4\4\1\0" +
                    "\3\4\1\0\33\4\4\0\3\5\4\0\1\5\40\0\35\4\3\0" +
                    "\35\4\43\0\10\4\1\0\34\4\2\5\31\0\66\4\12\0\26\4" +
                    "\12\0\23\4\15\0\22\4\156\0\111\4\67\0\63\4\15\0\63\4" +
                    "\u030d\0\3\5\65\4\17\5\37\0\12\14\17\0\4\5\55\4\13\5" +
                    "\2\0\1\5\22\0\31\4\7\0\12\14\6\0\3\5\44\4\16\5" +
                    "\1\0\12\14\20\0\43\4\1\5\2\0\1\4\11\0\3\5\60\4" +
                    "\16\5\4\4\5\0\3\5\3\0\12\14\1\4\1\0\1\4\43\0" +
                    "\22\4\1\0\31\4\14\5\6\0\1\5\101\0\7\4\1\0\1\4" +
                    "\1\0\4\4\1\0\17\4\1\0\12\4\7\0\57\4\14\5\5\0" +
                    "\12\14\6\0\4\5\1\0\10\4\2\0\2\4\2\0\26\4\1\0" +
                    "\7\4\1\0\2\4\1\0\5\4\2\0\1\5\1\4\7\5\2\0" +
                    "\2\5\2\0\3\5\2\0\1\4\6\0\1\5\5\0\5\4\2\5" +
                    "\2\0\7\5\3\0\5\5\213\0\65\4\22\5\4\4\5\0\12\14" +
                    "\46\0\60\4\24\5\2\4\1\0\1\4\10\0\12\14\246\0\57\4" +
                    "\7\5\2\0\11\5\27\0\4\4\2\5\42\0\60\4\21\5\3\0" +
                    "\1\4\13\0\12\14\46\0\53\4\15\5\10\0\12\14\66\0\32\4" +
                    "\3\0\17\5\4\0\12\14\u0166\0\100\4\12\14\25\0\1\4\u0100\0" +
                    "\1\4\12\5\50\4\7\5\1\4\4\5\10\0\1\5\10\0\1\4" +
                    "\13\5\50\4\2\0\4\4\20\5\46\0\71\4\u0107\0\11\4\1\0" +
                    "\45\4\10\5\1\0\10\5\1\4\17\0\12\14\30\0\36\4\2\0" +
                    "\26\5\1\0\16\5\111\0\7\4\1\0\2\4\1\0\46\4\6\5" +
                    "\3\0\1\5\1\0\2\5\1\0\7\5\1\4\1\5\10\0\12\5" +
                    "\u02a6\0\u039a\4\146\0\157\4\21\0\304\4\u0abc\0\u042f\4\u0fd1\0\u0247\4" +
                    "\u21b9\0\u0239\4\7\0\37\4\1\0\12\14\146\0\36\4\2\0\5\5" +
                    "\13\0\60\4\7\5\11\0\4\4\14\0\12\14\11\0\25\4\5\0" +
                    "\23\4\u0370\0\105\4\13\0\1\4\56\5\20\0\4\5\15\4\100\0" +
                    "\2\4\36\0\u17ed\4\23\0\u02f3\4\u250d\0\u011f\4\121\0\u018c\4\u0904\0" +
                    "\153\4\5\0\15\4\3\0\11\4\7\0\12\4\3\0\2\5\1\0" +
                    "\4\5\u14c1\0\5\5\3\0\26\5\2\0\7\5\36\0\4\5\224\0" +
                    "\3\5\u01bb\0\125\4\1\0\107\4\1\0\2\4\2\0\1\4\2\0" +
                    "\2\4\2\0\4\4\1\0\14\4\1\0\1\4\1\0\7\4\1\0" +
                    "\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0\34\4\1\0" +
                    "\4\4\1\0\5\4\1\0\1\4\3\0\7\4\1\0\u0154\4\2\0" +
                    "\31\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0" +
                    "\31\4\1\0\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0" +
                    "\10\4\2\0\62\14\u0200\0\67\5\4\0\62\5\10\0\1\5\16\0" +
                    "\1\5\26\0\5\5\1\0\17\5\u0550\0\7\5\1\0\21\5\2\0" +
                    "\7\5\1\0\2\5\1\0\5\5\u07d5\0\305\4\13\0\7\5\51\0" +
                    "\104\4\7\5\5\0\12\14\u04a6\0\4\4\1\0\33\4\1\0\2\4" +
                    "\1\0\1\4\2\0\1\4\1\0\12\4\1\0\4\4\1\0\1\4" +
                    "\1\0\1\4\6\0\1\4\4\0\1\4\1\0\1\4\1\0\1\4" +
                    "\1\0\3\4\1\0\2\4\1\0\1\4\2\0\1\4\1\0\1\4" +
                    "\1\0\1\4\1\0\1\4\1\0\1\4\1\0\2\4\1\0\1\4" +
                    "\2\0\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0\1\4" +
                    "\1\0\12\4\1\0\21\4\5\0\3\4\1\0\5\4\1\0\21\4" +
                    "\u1144\0\ua6d7\4\51\0\u1035\4\13\0\336\4\2\0\u1682\4\16\0\u1d31\4" +
                    "\u0c1f\0\u021e\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0" +
                    "\1\5\36\0\140\5\200\0\360\5\uffff\0\uffff\0\ufe12\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\2\2\6" +
                    "\1\1\1\7\1\10\1\1\1\11\1\12\20\5\1\13" +
                    "\1\14\1\15\1\16\1\1\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\1\1\2\2\0\1\27" +
                    "\1\30\1\0\1\31\1\0\1\32\3\5\1\33\30\5" +
                    "\1\34\1\35\1\36\1\37\1\40\1\41\2\0\1\5" +
                    "\1\42\5\5\1\43\13\5\1\44\10\5\1\27\1\0" +
                    "\1\45\1\5\1\46\1\47\2\5\1\50\1\51\1\52" +
                    "\1\53\1\54\1\55\1\5\1\56\20\5\1\57\4\5" +
                    "\1\60\1\61\3\5\1\62\1\5\1\63\4\5\1\64" +
                    "\1\5\1\65\1\66\1\5\1\67\7\5\1\70\2\5" +
                    "\1\71\5\5\1\72\1\5\1\73\1\5\1\74\1\75" +
                    "\1\5\1\76\1\5\1\77\1\5\1\100";

    private static int[] zzUnpackAction() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\76\0\76\0\174\0\76\0\272\0\370\0\u0136" +
                    "\0\u0174\0\u01b2\0\76\0\76\0\u01f0\0\u022e\0\76\0\u026c" +
                    "\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c" +
                    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c" +
                    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\76\0\76\0\76\0\76" +
                    "\0\76\0\76\0\76\0\76\0\u0782\0\u07c0\0\u07fe\0\u01b2" +
                    "\0\u083c\0\u087a\0\u01f0\0\76\0\u022e\0\76\0\u08b8\0\u08f6" +
                    "\0\u0934\0\272\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8" +
                    "\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98" +
                    "\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88" +
                    "\0\u0ec6\0\u0f04\0\76\0\76\0\76\0\76\0\76\0\76" +
                    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4" +
                    "\0\u1132\0\272\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6" +
                    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\272\0\u141a\0\u1458" +
                    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u160a" +
                    "\0\272\0\u1648\0\272\0\272\0\u1686\0\u16c4\0\272\0\272" +
                    "\0\272\0\272\0\272\0\272\0\u1702\0\272\0\u1740\0\u177e" +
                    "\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e" +
                    "\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\272\0\u1b20" +
                    "\0\u1b5e\0\u1b9c\0\u1bda\0\272\0\272\0\u1c18\0\u1c56\0\u1c94" +
                    "\0\272\0\u1cd2\0\272\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\272" +
                    "\0\u1e08\0\272\0\272\0\u1e46\0\272\0\u1e84\0\u1ec2\0\u1f00" +
                    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\272\0\u2036\0\u2074\0\272" +
                    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\272\0\u21e8\0\272" +
                    "\0\u2226\0\272\0\272\0\u2264\0\272\0\u22a2\0\272\0\u22e0" +
                    "\0\272";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\3" +
                    "\1\10\1\11\2\6\1\12\1\13\1\6\1\14\1\15" +
                    "\1\16\1\17\1\20\1\6\1\21\1\22\1\23\1\24" +
                    "\1\6\1\25\1\6\1\26\1\27\1\30\1\6\1\31" +
                    "\1\6\1\32\3\6\1\33\1\34\1\6\1\35\2\6" +
                    "\1\36\1\37\2\6\1\40\1\41\1\42\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\100\0\1\56\1\57\76\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\35\6\17\0\1\3\104\0\2\10" +
                    "\2\0\1\60\1\61\70\0\2\10\1\62\1\0\1\60" +
                    "\1\61\26\0\1\62\41\0\2\60\2\0\1\60\1\61" +
                    "\60\0\20\63\1\64\55\63\1\0\1\65\4\0\2\65" +
                    "\12\0\1\66\57\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\1\6\1\67\33\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\4\6\1\70\1\71\11\6\1\72" +
                    "\2\6\1\73\12\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\1\6\1\74\3\6\1\75\27\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\6\6\1\76" +
                    "\2\6\1\77\23\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\13\6\1\100\4\6\1\101\14\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\1\6\1\102" +
                    "\3\6\1\103\5\6\1\104\21\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\10\6\1\105\10\6\1\106" +
                    "\13\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\5\6\1\107\27\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\11\6\1\110\23\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\1\6\1\111\6\6\1\112" +
                    "\24\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\1\6\1\113\14\6\1\114\16\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\6\6\1\115\4\6\1\116" +
                    "\21\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\20\6\1\117\14\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\11\6\1\120\23\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\13\6\1\121\21\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\11\6\1\122" +
                    "\23\6\76\0\1\123\75\0\1\124\75\0\1\125\75\0" +
                    "\1\126\101\0\1\127\106\0\1\130\1\56\1\3\4\56" +
                    "\1\7\67\56\3\57\1\131\72\57\10\0\2\61\2\0" +
                    "\1\61\1\0\1\132\15\0\1\132\51\0\2\62\1\0" +
                    "\1\62\2\0\1\62\7\0\1\62\3\0\1\62\1\0" +
                    "\1\62\3\0\3\62\7\0\1\62\27\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\2\6\1\133\32\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\5\6\1\134" +
                    "\27\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\1\6\1\135\33\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\23\6\1\136\11\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\6\6\1\137\26\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\1\6\1\140" +
                    "\33\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\10\6\1\141\24\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\24\6\1\142\10\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\6\6\1\143\26\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\2\6\1\144" +
                    "\32\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\1\6\1\145\33\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\1\6\1\146\33\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\11\6\1\147\23\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\12\6\1\150" +
                    "\22\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\5\6\1\151\27\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\13\6\1\152\21\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\5\6\1\153\27\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\4\6\1\154" +
                    "\30\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\16\6\1\155\16\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\13\6\1\156\21\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\10\6\1\157\24\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\7\6\1\160" +
                    "\25\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\1\6\1\161\1\162\32\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\2\6\1\163\32\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\24\6\1\164\10\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\2\6" +
                    "\1\165\32\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\16\6\1\166\16\6\16\0\2\57\1\3\1\131" +
                    "\72\57\10\0\2\167\2\0\1\167\2\0\1\170\46\0" +
                    "\1\170\13\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\3\6\1\171\31\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\11\6\1\172\23\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\3\6\1\173\3\6\1\174" +
                    "\25\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\10\6\1\175\24\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\7\6\1\176\25\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\2\6\1\177\32\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\10\6\1\200" +
                    "\24\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\11\6\1\201\23\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\12\6\1\202\22\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\10\6\1\203\24\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\2\6\1\204" +
                    "\32\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\16\6\1\205\16\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\11\6\1\206\23\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\11\6\1\207\23\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\2\6\1\210" +
                    "\32\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\6\6\1\211\26\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\5\6\1\212\27\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\12\6\1\213\22\6\22\0" +
                    "\2\6\2\0\5\6\1\0\1\6\4\0\12\6\1\214" +
                    "\22\6\22\0\2\6\2\0\5\6\1\0\1\6\4\0" +
                    "\10\6\1\215\24\6\22\0\2\6\2\0\5\6\1\0" +
                    "\1\6\4\0\5\6\1\216\27\6\22\0\2\6\2\0" +
                    "\5\6\1\0\1\6\4\0\1\217\34\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\10\6\1\220\24\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\27\6" +
                    "\1\221\5\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\4\6\1\222\30\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\3\6\1\223\31\6\26\0\2\167" +
                    "\2\0\1\167\65\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\13\6\1\224\21\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\11\6\1\225\23\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\10\6\1\226\24\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\25\6" +
                    "\1\227\7\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\4\6\1\230\30\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\4\6\1\231\30\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\13\6\1\232\21\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\2\6" +
                    "\1\233\32\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\12\6\1\234\22\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\11\6\1\235\23\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\2\6\1\236\32\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\11\6" +
                    "\1\237\23\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\16\6\1\240\16\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\11\6\1\241\23\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\13\6\1\242\21\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\5\6" +
                    "\1\243\27\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\33\6\1\244\1\245\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\17\6\1\246\15\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\22\6\1\247\12\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\11\6" +
                    "\1\250\23\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\3\6\1\251\31\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\14\6\1\252\20\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\4\6\1\253\30\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\4\6" +
                    "\1\254\30\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\15\6\1\255\17\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\15\6\1\256\17\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\5\6\1\257\27\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\13\6" +
                    "\1\260\21\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\4\6\1\261\30\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\2\6\1\262\32\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\16\6\1\263\16\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\11\6" +
                    "\1\264\23\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\12\6\1\265\22\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\6\6\1\266\26\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\5\6\1\267\27\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\11\6" +
                    "\1\270\23\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\16\6\1\271\16\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\5\6\1\272\27\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\4\6\1\273\30\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\15\6" +
                    "\1\274\17\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\4\6\1\275\30\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\11\6\1\276\23\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\11\6\1\277\23\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\30\6" +
                    "\1\300\4\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\11\6\1\301\23\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\11\6\1\302\23\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\11\6\1\303\23\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\5\6" +
                    "\1\304\27\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\3\6\1\305\31\6\22\0\2\6\2\0\5\6" +
                    "\1\0\1\6\4\0\14\6\1\306\20\6\22\0\2\6" +
                    "\2\0\5\6\1\0\1\6\4\0\12\6\1\307\22\6" +
                    "\22\0\2\6\2\0\5\6\1\0\1\6\4\0\11\6" +
                    "\1\310\23\6\22\0\2\6\2\0\5\6\1\0\1\6" +
                    "\4\0\13\6\1\311\21\6\16\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[8990];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\2\11\1\1\1\11\5\1\2\11\2\1\1\11" +
                    "\25\1\10\11\2\1\2\0\2\1\1\0\1\11\1\0" +
                    "\1\11\34\1\6\11\2\0\35\1\1\0\121\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[201];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true iff the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true iff the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    public Symbol token(int tokenType) {
        //   System.out.println(yytext());
        return new Symbol(tokenType, yytext());
    }

    public Symbol token(int tokenType, Object value) {
        System.out.println(yytext());
        return new Symbol(tokenType, value);
    }

    StringBuffer out = new StringBuffer();


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 3484) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;
            yyclose();
        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                {
                    return new java_cup.runtime.Symbol(sym.EOF);
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        throw new Error("Illegal character <" + yytext() + ">");
                    }
                    // fall through
                    case 65:
                        break;
                    case 2: { /*ignore*/
                    }
                    // fall through
                    case 66:
                        break;
                    case 3: {
                        return token(sym.DIV);
                    }
                    // fall through
                    case 67:
                        break;
                    case 4: {
                        return token(sym.PROD);
                    }
                    // fall through
                    case 68:
                        break;
                    case 5: {
                        return token(sym.ID, new String(yytext()));
                    }
                    // fall through
                    case 69:
                        break;
                    case 6: {
                        return token(sym.INTCONST, new Integer(yytext()));
                    }
                    // fall through
                    case 70:
                        break;
                    case 7: {
                        return token(sym.DOT);
                    }
                    // fall through
                    case 71:
                        break;
                    case 8: {
                        return token(sym.MINUS);
                    }
                    // fall through
                    case 72:
                        break;
                    case 9: {
                        return token(sym.LBRACK);
                    }
                    // fall through
                    case 73:
                        break;
                    case 10: {
                        return token(sym.RBRACK);
                    }
                    // fall through
                    case 74:
                        break;
                    case 11: {
                        return token(sym.ASSIGN);
                    }
                    // fall through
                    case 75:
                        break;
                    case 12: {
                        return token(sym.NOT);
                    }
                    // fall through
                    case 76:
                        break;
                    case 13: {
                        return token(sym.LESS);
                    }
                    // fall through
                    case 77:
                        break;
                    case 14: {
                        return token(sym.GREATER);
                    }
                    // fall through
                    case 78:
                        break;
                    case 15: {
                        return token(sym.COLON);
                    }
                    // fall through
                    case 79:
                        break;
                    case 16: {
                        return token(sym.ADD);
                    }
                    // fall through
                    case 80:
                        break;
                    case 17: {
                        return token(sym.MOD);
                    }
                    // fall through
                    case 81:
                        break;
                    case 18: {
                        return token(sym.COMMA);
                    }
                    // fall through
                    case 82:
                        break;
                    case 19: {
                        return token(sym.LBRACES);
                    }
                    // fall through
                    case 83:
                        break;
                    case 20: {
                        return token(sym.RBRACES);
                    }
                    // fall through
                    case 84:
                        break;
                    case 21: {
                        return token(sym.LCURLY);
                    }
                    // fall through
                    case 85:
                        break;
                    case 22: {
                        return token(sym.RCURLY);
                    }
                    // fall through
                    case 86:
                        break;
                    case 23: {
                        return token(sym.DOUBLECONST, new Float(yytext()));
                    }
                    // fall through
                    case 87:
                        break;
                    case 24: {
                        return token(sym.HEXCONST, new String(yytext()));
                    }
                    // fall through
                    case 88:
                        break;
                    case 25: {
                        return token(sym.STRINGCONST, new String(yytext()));
                    }
                    // fall through
                    case 89:
                        break;
                    case 26: {
                        return token(sym.LRBRACK);
                    }
                    // fall through
                    case 90:
                        break;
                    case 27: {
                        return token(sym.IF);
                    }
                    // fall through
                    case 91:
                        break;
                    case 28: {
                        return token(sym.EQUAL);
                    }
                    // fall through
                    case 92:
                        break;
                    case 29: {
                        return token(sym.NOTEQUAL);
                    }
                    // fall through
                    case 93:
                        break;
                    case 30: {
                        return token(sym.LESSEQUAL);
                    }
                    // fall through
                    case 94:
                        break;
                    case 31: {
                        return token(sym.GREATEREQUAL);
                    }
                    // fall through
                    case 95:
                        break;
                    case 32: {
                        return token(sym.AND);
                    }
                    // fall through
                    case 96:
                        break;
                    case 33: {
                        return token(sym.OR);
                    }
                    // fall through
                    case 97:
                        break;
                    case 34: {
                        return token(sym.INT);
                    }
                    // fall through
                    case 98:
                        break;
                    case 35: {
                        return token(sym.NEW);
                    }
                    // fall through
                    case 99:
                        break;
                    case 36: {
                        return token(sym.FOR);
                    }
                    // fall through
                    case 100:
                        break;
                    case 37: {
                        return token(sym.VOID);
                    }
                    // fall through
                    case 101:
                        break;
                    case 38: {
                        return token(sym.ITOD);
                    }
                    // fall through
                    case 102:
                        break;
                    case 39: {
                        return token(sym.ITOB);
                    }
                    // fall through
                    case 103:
                        break;
                    case 40: {
                        return token(sym.DTOI);
                    }
                    // fall through
                    case 104:
                        break;
                    case 41: {
                        return token(sym.NULL);
                    }
                    // fall through
                    case 105:
                        break;
                    case 42: {
                        return token(sym.TRUE);
                    }
                    // fall through
                    case 106:
                        break;
                    case 43: {
                        return token(sym.THIS);
                    }
                    // fall through
                    case 107:
                        break;
                    case 44: {
                        return token(sym.BOOL);
                    }
                    // fall through
                    case 108:
                        break;
                    case 45: {
                        return token(sym.BTOI);
                    }
                    // fall through
                    case 109:
                        break;
                    case 46: {
                        return token(sym.ELSE);
                    }
                    // fall through
                    case 110:
                        break;
                    case 47: {
                        return token(sym.BREAK);
                    }
                    // fall through
                    case 111:
                        break;
                    case 48: {
                        return token(sym.CLASS);
                    }
                    // fall through
                    case 112:
                        break;
                    case 49: {
                        return token(sym.FALSE);
                    }
                    // fall through
                    case 113:
                        break;
                    case 50: {
                        return token(sym.WHILE);
                    }
                    // fall through
                    case 114:
                        break;
                    case 51: {
                        return token(sym.PRINT);
                    }
                    // fall through
                    case 115:
                        break;
                    case 52: {
                        return token(sym.DOUBLE);
                    }
                    // fall through
                    case 116:
                        break;
                    case 53: {
                        return token(sym.STRING);
                    }
                    // fall through
                    case 117:
                        break;
                    case 54: {
                        return token(sym.RETURN);
                    }
                    // fall through
                    case 118:
                        break;
                    case 55: {
                        return token(sym.PUBLIC);
                    }
                    // fall through
                    case 119:
                        break;
                    case 56: {
                        return token(sym.EXTENDS);
                    }
                    // fall through
                    case 120:
                        break;
                    case 57: {
                        return token(sym.PRIVATE);
                    }
                    // fall through
                    case 121:
                        break;
                    case 58: {
                        return token(sym.CONTINUE);
                    }
                    // fall through
                    case 122:
                        break;
                    case 59: {
                        return token(sym.NEWARRAY);
                    }
                    // fall through
                    case 123:
                        break;
                    case 60: {
                        return token(sym.READLINE);
                    }
                    // fall through
                    case 124:
                        break;
                    case 61: {
                        return token(sym.INTERFACE);
                    }
                    // fall through
                    case 125:
                        break;
                    case 62: {
                        return token(sym.PROTECTED);
                    }
                    // fall through
                    case 126:
                        break;
                    case 63: {
                        return token(sym.IMPLEMENTS);
                    }
                    // fall through
                    case 127:
                        break;
                    case 64: {
                        return token(sym.READINTEGER);
                    }
                    // fall through
                    case 128:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This is a standalone scanner, it will print any unmatched
     * text to System.out unchanged.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                Lexer scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new Lexer(reader);
                    while (!scanner.zzAtEOF) scanner.next_token();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
