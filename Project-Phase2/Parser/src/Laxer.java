// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Scanner.flex

import java.io.*;
import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Laxer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u0100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\2\u1f00"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u1f00\1\u4a00\1\u1f00\1\u4b00\1\u4c00\2\u1f00\3\u0100"+
    "\1\u4d00\1\u4e00\1\u4f00\12\u1f00\4\u0100\1\u5000\17\u1f00\2\u0100"+
    "\1\u5100\41\u1f00\2\u0100\1\u5200\1\u5300\3\u1f00\1\u5400\27\u0100"+
    "\1\u5500\2\u0100\1\u5600\45\u1f00\1\u0100\1\u5700\1\u5800\11\u1f00"+
    "\1\u5900\24\u1f00\1\u5a00\1\u5b00\1\u1f00\1\u5c00\1\u5d00\1\u5e00"+
    "\1\u5f00\2\u1f00\1\u6000\5\u1f00\1\u6100\1\u6200\1\u6300\5\u1f00"+
    "\1\u6400\1\u6500\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100"+
    "\1\u6800\1\u6900\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100"+
    "\1\u6c00\u0b05\u1f00\1\u6d00\1\u6e00\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\3"+
    "\1\1\1\5\1\6\1\3\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\11\23\1\3\1\24\1\25\1\26\1\27\2\3"+
    "\1\30\3\31\1\32\1\31\2\7\1\33\2\7\1\34"+
    "\1\7\1\35\1\7\1\36\1\7\1\37\5\7\1\40"+
    "\2\7\1\41\1\42\1\43\1\3\1\7\1\3\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\7\1\55\1\56\1\57\1\60\1\61\1\62\1\7"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\7\1\73\1\74\1\75\1\3\41\0\2\3\4\7"+
    "\4\3\1\7\2\3\1\0\7\3\1\7\4\3\1\7"+
    "\5\3\27\7\1\3\37\7\1\3\u01ca\7\4\3\14\7"+
    "\16\3\5\7\7\3\1\7\1\3\1\7\21\3\160\0"+
    "\5\7\1\3\2\7\2\3\4\7\1\3\1\7\6\3"+
    "\1\7\1\3\3\7\1\3\1\7\1\3\24\7\1\3"+
    "\123\7\1\3\213\7\1\3\5\0\2\3\246\7\1\3"+
    "\46\7\2\3\1\7\7\3\47\7\7\3\1\7\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\7\5\3\3\7\15\3\6\0\5\3"+
    "\1\7\4\3\13\0\1\3\1\0\3\3\53\7\25\0"+
    "\12\76\4\3\2\7\1\0\143\7\1\3\1\7\10\0"+
    "\1\3\6\0\2\7\2\0\1\3\4\0\2\7\12\76"+
    "\3\7\2\3\1\7\17\3\1\0\1\7\1\0\36\7"+
    "\33\0\2\3\131\7\13\0\1\7\16\3\12\76\41\7"+
    "\11\0\2\7\4\3\1\7\5\3\26\7\4\0\1\7"+
    "\11\0\1\7\3\0\1\7\5\0\22\3\31\7\3\0"+
    "\4\3\13\7\65\3\25\7\1\3\10\7\26\3\60\0"+
    "\66\7\3\0\1\7\22\0\1\7\7\0\12\7\2\0"+
    "\2\3\12\76\1\3\20\7\3\0\1\3\10\7\2\3"+
    "\2\7\2\3\26\7\1\3\7\7\1\3\1\7\3\3"+
    "\4\7\2\3\1\0\1\7\7\0\2\3\2\0\2\3"+
    "\3\0\1\7\10\3\1\0\4\3\2\7\1\3\3\7"+
    "\2\0\2\3\12\76\4\7\7\3\2\7\4\3\3\0"+
    "\1\3\6\7\4\3\2\7\2\3\26\7\1\3\7\7"+
    "\1\3\2\7\1\3\2\7\1\3\2\7\2\3\1\0"+
    "\1\3\5\0\4\3\2\0\2\3\3\0\3\3\1\0"+
    "\7\3\4\7\1\3\1\7\7\3\12\76\2\0\3\7"+
    "\1\0\13\3\3\0\1\3\11\7\1\3\3\7\1\3"+
    "\26\7\1\3\7\7\1\3\2\7\1\3\5\7\2\3"+
    "\1\0\1\7\10\0\1\3\3\0\1\3\3\0\2\3"+
    "\1\7\17\3\2\7\2\0\2\3\12\76\1\3\1\7"+
    "\7\3\1\7\6\0\1\3\3\0\1\3\10\7\2\3"+
    "\2\7\2\3\26\7\1\3\7\7\1\3\2\7\1\3"+
    "\5\7\2\3\1\0\1\7\7\0\2\3\2\0\2\3"+
    "\3\0\10\3\2\0\4\3\2\7\1\3\3\7\2\0"+
    "\2\3\12\76\1\3\1\7\20\3\1\0\1\7\1\3"+
    "\6\7\3\3\3\7\1\3\4\7\3\3\2\7\1\3"+
    "\1\7\1\3\2\7\3\3\2\7\3\3\3\7\3\3"+
    "\14\7\4\3\5\0\3\3\3\0\1\3\4\0\2\3"+
    "\1\7\6\3\1\0\16\3\12\76\11\3\1\7\6\3"+
    "\4\0\1\3\10\7\1\3\3\7\1\3\27\7\1\3"+
    "\20\7\3\3\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\7\3\2\0\1\3\3\7\5\3\2\7\2\0\2\3"+
    "\12\76\20\3\1\7\3\0\1\3\10\7\1\3\3\7"+
    "\1\3\27\7\1\3\12\7\1\3\5\7\2\3\1\0"+
    "\1\7\7\0\1\3\3\0\1\3\4\0\7\3\2\0"+
    "\7\3\1\7\1\3\2\7\2\0\2\3\12\76\1\3"+
    "\2\7\15\3\4\0\1\3\10\7\1\3\3\7\1\3"+
    "\51\7\2\0\1\7\7\0\1\3\3\0\1\3\4\0"+
    "\1\7\5\3\3\7\1\0\7\3\3\7\2\0\2\3"+
    "\12\76\12\3\6\7\2\3\2\0\1\3\22\7\3\3"+
    "\30\7\1\3\11\7\1\3\1\7\2\3\7\7\3\3"+
    "\1\0\4\3\6\0\1\3\1\0\1\3\10\0\6\3"+
    "\12\76\2\3\2\0\15\3\60\7\1\0\2\7\7\0"+
    "\4\3\10\7\10\0\1\3\12\76\47\3\2\7\1\3"+
    "\1\7\2\3\2\7\1\3\1\7\2\3\1\7\6\3"+
    "\4\7\1\3\7\7\1\3\3\7\1\3\1\7\1\3"+
    "\1\7\2\3\2\7\1\3\4\7\1\0\2\7\6\0"+
    "\1\3\2\0\1\7\2\3\5\7\1\3\1\7\1\3"+
    "\6\0\2\3\12\76\2\3\4\7\40\3\1\7\27\3"+
    "\2\0\6\3\12\76\13\3\1\0\1\3\1\0\1\3"+
    "\1\0\4\3\2\0\10\7\1\3\44\7\4\3\24\0"+
    "\1\3\2\0\5\7\13\0\1\3\44\0\11\3\1\0"+
    "\71\3\53\7\24\0\1\7\12\76\6\3\6\7\4\0"+
    "\4\7\3\0\1\7\3\0\2\7\7\0\3\7\4\0"+
    "\15\7\14\0\1\7\1\0\12\76\4\0\2\3\46\7"+
    "\1\3\1\7\5\3\1\7\2\3\53\7\1\3\115\7"+
    "\1\3\4\7\2\3\7\7\1\3\1\7\1\3\4\7"+
    "\2\3\51\7\1\3\4\7\2\3\41\7\1\3\4\7"+
    "\2\3\7\7\1\3\1\7\1\3\4\7\2\3\17\7"+
    "\1\3\71\7\1\3\4\7\2\3\103\7\2\3\3\0"+
    "\40\3\20\7\20\3\126\7\2\3\6\7\3\3\u016c\7"+
    "\2\3\21\7\1\3\32\7\5\3\113\7\3\3\13\7"+
    "\7\3\15\7\1\3\4\7\3\0\13\3\22\7\3\0"+
    "\13\3\22\7\2\0\14\3\15\7\1\3\3\7\1\3"+
    "\2\0\14\3\64\7\40\0\3\3\1\7\3\3\2\7"+
    "\1\0\2\3\12\76\41\3\4\0\1\3\12\76\6\3"+
    "\130\7\10\3\5\7\2\0\42\7\1\0\1\7\5\3"+
    "\106\7\12\3\37\7\1\3\14\0\4\3\14\0\12\3"+
    "\12\76\36\7\2\3\5\7\13\3\54\7\4\3\32\7"+
    "\6\3\12\76\46\3\27\7\5\0\4\3\65\7\12\0"+
    "\1\3\35\0\2\3\1\0\12\76\6\3\12\76\15\3"+
    "\1\7\10\3\16\0\102\3\5\0\57\7\21\0\7\7"+
    "\4\3\12\76\21\3\11\0\14\3\3\0\36\7\15\0"+
    "\2\7\12\76\54\7\16\0\14\3\44\7\24\0\10\3"+
    "\12\76\3\3\3\7\12\76\44\7\2\3\11\7\107\3"+
    "\3\0\1\3\25\0\4\7\1\0\4\7\3\0\2\7"+
    "\3\0\6\3\300\7\72\0\1\3\5\0\26\7\2\3"+
    "\6\7\2\3\46\7\2\3\6\7\2\3\10\7\1\3"+
    "\1\7\1\3\1\7\1\3\1\7\1\3\37\7\2\3"+
    "\65\7\1\3\7\7\1\3\1\7\3\3\3\7\1\3"+
    "\7\7\3\3\4\7\2\3\6\7\4\3\15\7\5\3"+
    "\3\7\1\3\7\7\16\3\5\0\32\3\1\77\1\100"+
    "\1\101\2\0\20\3\2\7\23\3\1\7\13\3\5\0"+
    "\1\3\12\0\1\3\1\7\15\3\1\7\20\3\15\7"+
    "\3\3\40\7\20\3\15\0\4\3\1\0\3\3\14\0"+
    "\21\3\1\7\4\3\1\7\2\3\12\7\1\3\1\7"+
    "\3\3\5\7\6\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\4\7\1\3\13\7\2\3\4\7\5\3\5\7"+
    "\4\3\1\7\21\3\51\7\u0177\3\57\7\1\3\57\7"+
    "\1\3\205\7\6\3\4\7\3\0\2\7\14\3\46\7"+
    "\1\3\1\7\5\3\1\7\2\3\70\7\7\3\1\7"+
    "\17\3\1\0\27\7\11\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\7\7\1\3\7\7\1\3"+
    "\7\7\1\3\7\7\1\3\40\0\57\3\1\7\325\3"+
    "\3\7\31\3\11\7\6\0\1\3\5\7\2\3\5\7"+
    "\4\3\126\7\2\3\2\0\2\3\3\7\1\3\132\7"+
    "\1\3\4\7\5\3\52\7\2\3\136\7\21\3\33\7"+
    "\65\3\306\7\112\3\353\7\25\3\215\7\103\3\56\7"+
    "\2\3\15\7\3\3\20\7\12\76\2\7\24\3\57\7"+
    "\1\0\4\3\12\0\1\3\37\7\2\0\120\7\2\0"+
    "\45\3\11\7\2\3\147\7\2\3\44\7\1\3\10\7"+
    "\77\3\13\7\1\0\3\7\1\0\4\7\1\0\27\7"+
    "\5\0\20\3\1\7\7\3\64\7\14\3\2\0\62\7"+
    "\22\0\12\3\12\76\6\3\22\0\6\7\3\3\1\7"+
    "\1\3\1\7\2\3\12\76\34\7\10\0\2\3\27\7"+
    "\15\0\14\3\35\7\3\3\4\0\57\7\16\0\16\3"+
    "\1\7\12\76\6\3\5\7\1\0\12\7\12\76\5\7"+
    "\1\3\51\7\16\0\11\3\3\7\1\0\10\7\2\0"+
    "\2\3\12\76\6\3\27\7\3\3\1\7\3\0\62\7"+
    "\1\0\1\7\3\0\2\7\2\0\5\7\2\0\1\7"+
    "\1\0\1\7\30\3\3\7\2\3\13\7\5\0\2\3"+
    "\3\7\2\0\12\3\6\7\2\3\6\7\2\3\6\7"+
    "\11\3\7\7\1\3\7\7\1\3\53\7\1\3\12\7"+
    "\12\3\163\7\10\0\1\3\2\0\2\3\12\76\6\3"+
    "\244\7\14\3\27\7\4\3\61\7\4\3\156\7\2\3"+
    "\152\7\46\3\7\7\14\3\5\7\5\3\1\7\1\0"+
    "\12\7\1\3\15\7\1\3\5\7\1\3\1\7\1\3"+
    "\2\7\1\3\2\7\1\3\154\7\41\3\153\7\22\3"+
    "\100\7\2\3\66\7\50\3\15\7\3\3\20\0\20\3"+
    "\20\0\3\3\2\7\30\3\3\7\31\3\1\7\6\3"+
    "\5\7\1\3\207\7\2\3\1\0\4\3\1\7\13\3"+
    "\12\76\7\3\32\7\4\3\1\7\1\3\32\7\13\3"+
    "\131\7\3\3\6\7\2\3\6\7\2\3\6\7\2\3"+
    "\3\7\3\3\2\7\3\3\2\7\22\3\3\0\4\3"+
    "\14\7\1\3\32\7\1\3\23\7\1\3\2\7\1\3"+
    "\17\7\2\3\16\7\42\3\173\7\105\3\65\7\210\3"+
    "\1\0\202\3\35\7\3\3\61\7\17\3\1\0\37\3"+
    "\40\7\15\3\36\7\5\3\46\7\5\0\5\3\36\7"+
    "\2\3\44\7\4\3\10\7\1\3\5\7\52\3\236\7"+
    "\2\3\12\76\6\3\44\7\4\3\44\7\4\3\50\7"+
    "\10\3\64\7\234\3\67\7\11\3\26\7\12\3\10\7"+
    "\230\3\6\7\2\3\1\7\1\3\54\7\1\3\2\7"+
    "\3\3\1\7\2\3\27\7\12\3\27\7\11\3\37\7"+
    "\101\3\23\7\1\3\2\7\12\3\26\7\12\3\32\7"+
    "\106\3\70\7\6\3\2\7\100\3\1\7\3\0\1\3"+
    "\2\0\5\3\4\0\4\7\1\3\3\7\1\3\33\7"+
    "\4\3\3\0\4\3\1\0\40\3\35\7\3\3\35\7"+
    "\43\3\10\7\1\3\34\7\2\0\31\3\66\7\12\3"+
    "\26\7\12\3\23\7\15\3\22\7\156\3\111\7\67\3"+
    "\63\7\15\3\63\7\75\3\12\102\306\3\3\0\65\7"+
    "\17\0\37\3\12\76\17\3\4\0\55\7\13\0\2\3"+
    "\1\0\22\3\31\7\7\3\12\76\6\3\3\0\44\7"+
    "\16\0\1\3\12\76\20\3\43\7\1\0\2\3\1\7"+
    "\11\3\3\0\60\7\16\0\4\7\5\3\3\0\3\3"+
    "\12\76\1\7\1\3\1\7\43\3\22\7\1\3\31\7"+
    "\14\0\6\3\1\0\101\3\7\7\1\3\1\7\1\3"+
    "\4\7\1\3\17\7\1\3\12\7\7\3\57\7\14\0"+
    "\5\3\12\76\6\3\4\0\1\3\10\7\2\3\2\7"+
    "\2\3\26\7\1\3\7\7\1\3\2\7\1\3\5\7"+
    "\2\3\1\0\1\7\7\0\2\3\2\0\2\3\3\0"+
    "\2\3\1\7\6\3\1\0\5\3\5\7\2\0\2\3"+
    "\7\0\3\3\5\0\213\3\65\7\22\0\4\7\5\3"+
    "\12\76\46\3\60\7\24\0\2\7\1\3\1\7\10\3"+
    "\12\76\246\3\57\7\7\0\2\3\11\0\27\3\4\7"+
    "\2\0\42\3\60\7\21\0\3\3\1\7\13\3\12\76"+
    "\46\3\53\7\15\0\10\3\12\76\66\3\32\7\3\3"+
    "\17\0\4\3\12\76\u0166\3\100\7\12\76\25\3\2\7"+
    "\12\0\50\7\7\0\1\7\4\0\10\3\1\0\10\3"+
    "\1\7\13\0\50\7\2\3\4\7\20\0\46\3\71\7"+
    "\7\3\11\7\1\3\45\7\10\0\1\3\10\0\1\7"+
    "\17\3\12\76\30\3\36\7\2\3\26\0\1\3\16\0"+
    "\111\3\7\7\1\3\2\7\1\3\46\7\6\0\3\3"+
    "\1\0\1\3\2\0\1\3\7\0\1\7\1\0\10\3"+
    "\12\76\106\3\12\102\126\3\232\7\146\3\157\7\21\3"+
    "\304\7\274\3\57\7\321\3\107\7\271\3\71\7\7\3"+
    "\37\7\1\3\12\76\146\3\36\7\2\3\5\0\13\3"+
    "\60\7\7\0\11\3\4\7\14\3\12\76\11\3\25\7"+
    "\5\3\23\7\160\3\105\7\13\3\1\7\56\0\20\3"+
    "\4\0\15\7\100\3\2\7\36\3\355\7\23\3\363\7"+
    "\15\3\37\7\121\3\u018c\7\4\3\153\7\5\3\15\7"+
    "\3\3\11\7\7\3\12\7\3\3\2\0\1\3\4\0"+
    "\301\3\5\0\3\3\26\0\2\3\7\0\36\3\4\0"+
    "\224\3\3\0\273\3\125\7\1\3\107\7\1\3\2\7"+
    "\2\3\1\7\2\3\2\7\2\3\4\7\1\3\14\7"+
    "\1\3\1\7\1\3\7\7\1\3\101\7\1\3\4\7"+
    "\2\3\10\7\1\3\7\7\1\3\34\7\1\3\4\7"+
    "\1\3\5\7\1\3\1\7\3\3\7\7\1\3\u0154\7"+
    "\2\3\31\7\1\3\31\7\1\3\37\7\1\3\31\7"+
    "\1\3\37\7\1\3\31\7\1\3\37\7\1\3\31\7"+
    "\1\3\37\7\1\3\31\7\1\3\10\7\2\3\62\76"+
    "\67\0\4\3\62\0\10\3\1\0\16\3\1\0\26\3"+
    "\5\0\1\3\17\0\120\3\7\0\1\3\21\0\2\3"+
    "\7\0\1\3\2\0\1\3\5\0\u0115\3\12\102\u01a6\3"+
    "\12\102\6\3\305\7\13\3\7\0\51\3\104\7\7\0"+
    "\5\3\12\76\246\3\4\7\1\3\33\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\12\7\1\3\4\7"+
    "\1\3\1\7\1\3\1\7\6\3\1\7\4\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\3\7\1\3\2\7"+
    "\1\3\1\7\2\3\1\7\1\3\1\7\1\3\1\7"+
    "\1\3\1\7\1\3\1\7\1\3\2\7\1\3\1\7"+
    "\2\3\4\7\1\3\7\7\1\3\4\7\1\3\4\7"+
    "\1\3\1\7\1\3\12\7\1\3\21\7\5\3\3\7"+
    "\1\3\5\7\1\3\21\7\104\3\327\7\51\3\65\7"+
    "\13\3\336\7\2\3\u0182\7\16\3\u0131\7\37\3\36\7"+
    "\343\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28416];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\2\3\1\4\1\2\1\5\1\6\1\2"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\1\1\17\1\20\1\21\1\22\3\5\1\23\1\24"+
    "\14\5\1\25\1\2\1\26\2\2\1\27\1\0\1\30"+
    "\1\0\1\3\1\31\1\1\1\0\1\32\1\33\1\34"+
    "\13\5\1\35\12\5\1\36\1\0\1\37\2\0\12\5"+
    "\1\40\1\5\1\41\1\42\7\5\5\0\1\31\3\5"+
    "\1\43\3\5\1\44\4\5\1\45\2\5\1\46\1\47"+
    "\1\50\1\5\5\0\1\5\1\51\2\5\1\52\1\53"+
    "\2\5\1\54\4\5\1\55\6\0\3\5\1\56\3\5"+
    "\1\57\1\60\7\0\3\5\1\61\2\5\7\0\1\62"+
    "\1\5\1\63\2\5\1\64\1\65\1\66\1\67\3\0"+
    "\2\5\1\70\3\0\1\5\1\71\2\0\1\72\1\73"+
    "\1\74\2\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\103\0\206\0\311\0\u010c\0\u014f\0\103"+
    "\0\u0192\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\u01d5\0\u0218\0\u025b\0\103\0\u029e\0\u02e1\0\u0324\0\u0367"+
    "\0\u03aa\0\u03ed\0\103\0\103\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\103\0\u0754\0\103\0\u0797\0\u07da\0\103\0\u081d\0\103"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u0797\0\103\0\103\0\103"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41"+
    "\0\u0b84\0\u0bc7\0\u0c0a\0\u014f\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16"+
    "\0\u0d59\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\103\0\u0eeb"+
    "\0\103\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u014f\0\u1252\0\u1295"+
    "\0\u014f\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a"+
    "\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u014f\0\u16c5\0\u1708\0\u174b\0\u014f\0\u178e\0\u17d1"+
    "\0\u1814\0\u1857\0\u014f\0\u189a\0\u18dd\0\u014f\0\u014f\0\u014f"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u014f"+
    "\0\u1af5\0\u1b38\0\u014f\0\u014f\0\u1b7b\0\u1bbe\0\u014f\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u014f\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6"+
    "\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u014f\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u014f\0\u014f\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d"+
    "\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u014f\0\u22cf\0\u2312"+
    "\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u014f"+
    "\0\u252a\0\u014f\0\u256d\0\u25b0\0\103\0\103\0\103\0\103"+
    "\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u014f\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u014f\0\u284e\0\u2891\0\103\0\u014f\0\103"+
    "\0\u28d4\0\u2917\0\103";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\5\7"+
    "\1\30\1\31\1\32\1\7\1\33\1\2\1\34\1\7"+
    "\1\35\1\36\1\37\1\40\1\41\2\7\1\42\3\7"+
    "\1\43\2\7\1\44\1\45\1\46\1\7\1\47\1\50"+
    "\2\7\1\51\1\52\1\53\1\54\1\2\1\55\1\2"+
    "\1\54\105\0\1\3\126\0\1\56\54\0\12\57\2\0"+
    "\26\57\1\0\15\57\1\0\2\57\1\0\10\57\1\0"+
    "\6\57\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\27\7\3\0\4\7\12\0\1\60\105\0\1\61"+
    "\4\0\1\62\101\0\1\63\1\0\2\23\14\0\1\64"+
    "\30\0\1\64\4\0\1\65\3\0\1\65\20\0\1\63"+
    "\1\0\2\23\52\0\1\65\3\0\1\65\26\0\1\66"+
    "\102\0\1\67\102\0\1\70\54\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\4\7\1\71\22\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\17\7\1\72\7\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\4\7\1\73\22\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\15\7"+
    "\1\74\1\7\1\75\7\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\12\7"+
    "\1\76\14\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\15\7\1\77\11\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\12\7\1\100\12\7\1\101\1\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\1\102\14\7\1\103\11\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\5\7\1\104\5\7\1\105\1\106\12\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\4\7\1\107\15\7\1\110\4\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\4\7\1\111\22\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\21\7\1\112\5\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\7\7"+
    "\1\113\7\7\1\114\7\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\15\7"+
    "\1\115\11\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\7\7\1\116\17\7"+
    "\3\0\4\7\75\0\1\117\26\0\1\63\1\0\2\65"+
    "\52\0\1\65\3\0\1\65\77\0\1\120\3\0\6\57"+
    "\1\121\74\57\14\61\1\122\66\61\2\62\1\3\1\62"+
    "\1\4\76\62\22\0\2\63\6\0\1\123\15\0\1\123"+
    "\25\0\1\63\3\0\1\63\22\0\2\64\4\0\3\64"+
    "\11\0\6\64\31\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\24\7\1\124\2\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\10\7\1\125\16\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\1\126"+
    "\26\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\15\7\1\127\11\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\4\7\1\130\22\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\1\131\26\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\22\7\1\132\4\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\20\7\1\133\6\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\21\7\1\134\5\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\12\7"+
    "\1\135\14\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\17\7\1\136\7\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\16\7\1\137\10\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\21\7\1\140\5\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\24\7"+
    "\1\141\2\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\12\7\1\142\14\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\21\7\1\143\5\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\17\7\1\144\7\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\10\7"+
    "\1\145\16\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\22\7\1\146\4\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\10\7\1\147\16\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\10\7\1\150\16\7\3\0\4\7\46\0\1\151"+
    "\1\0\1\152\4\0\1\153\5\0\1\154\20\0\14\61"+
    "\1\122\4\61\1\3\61\61\15\0\1\155\1\0\1\155"+
    "\2\0\2\156\52\0\1\156\3\0\1\156\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\1\157\10\7\3\0\27\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\14\7\1\160\12\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\3\7\1\161\23\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\12\7"+
    "\1\162\14\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\1\163\26\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\20\7\1\164\6\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\1\7\1\165\25\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\4\7\1\166"+
    "\22\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\4\7\1\167\22\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\20\7\1\170\6\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\12\7\1\171\14\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\4\7\1\172"+
    "\22\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\12\7\1\173\14\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\22\7\1\174\4\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\10\7\1\175\16\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\20\7\1\176"+
    "\6\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\4\7\1\177\22\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\3\7\1\200\23\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\12\7\1\201\14\7\3\0\4\7\66\0\1\202\102\0"+
    "\1\203\102\0\1\204\100\0\1\205\2\0\1\206\36\0"+
    "\2\156\52\0\1\156\3\0\1\156\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\17\7\1\207\7\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\21\7\1\210\5\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\3\7"+
    "\1\211\1\212\4\7\3\0\27\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\11\7\1\213\15\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\20\7\1\214"+
    "\6\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\12\7\1\215\14\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\14\7\1\216\12\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\4\7\1\217\22\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\4\7\1\220"+
    "\22\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\17\7\1\221\7\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\17\7\1\222\7\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\14\7\1\223\12\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\4\7\1\224"+
    "\22\7\3\0\4\7\62\0\1\225\102\0\1\226\102\0"+
    "\1\227\75\0\1\230\4\0\1\231\66\0\1\232\35\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\17\7\1\233\7\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\14\7\1\234"+
    "\12\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\10\7\1\235\16\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\4\7\1\236\22\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\3\7\1\237\23\7\3\0\4\7\1\0\1\7\6\0"+
    "\1\7\12\0\2\7\4\0\11\7\3\0\13\7\1\240"+
    "\13\7\3\0\4\7\1\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\5\7\1\241\21\7\3\0"+
    "\4\7\1\0\1\7\6\0\1\7\12\0\2\7\4\0"+
    "\11\7\3\0\14\7\1\242\12\7\3\0\4\7\1\0"+
    "\1\7\6\0\1\7\12\0\2\7\4\0\11\7\3\0"+
    "\6\7\1\243\20\7\3\0\4\7\55\0\1\244\102\0"+
    "\1\245\73\0\1\246\1\0\1\247\122\0\1\250\100\0"+
    "\1\251\73\0\1\252\24\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\1\253\26\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\21\7\1\254\5\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\14\7"+
    "\1\255\12\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\20\7\1\256\6\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\4\7\1\257\22\7\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\1\260\26\7\3\0\4\7\102\0\1\261\102\0"+
    "\1\262\102\0\1\263\102\0\1\264\45\0\1\265\106\0"+
    "\1\266\106\0\1\267\26\0\1\7\6\0\1\7\12\0"+
    "\2\7\4\0\11\7\3\0\26\7\1\270\3\0\4\7"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\4\7\1\271\22\7\3\0\4\7\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\4\7"+
    "\1\272\22\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\14\7\1\273\12\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\2\7\1\274\24\7\3\0\4\7"+
    "\102\0\1\275\102\0\1\276\102\0\1\277\102\0\1\300"+
    "\66\0\1\301\63\0\1\302\102\0\1\303\34\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\6\7"+
    "\1\304\20\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\21\7\1\305\5\7"+
    "\3\0\4\7\1\0\1\7\6\0\1\7\12\0\2\7"+
    "\4\0\11\7\3\0\4\7\1\306\22\7\3\0\4\7"+
    "\51\0\1\307\117\0\1\310\116\0\1\311\1\0\1\7"+
    "\6\0\1\7\12\0\2\7\4\0\11\7\3\0\4\7"+
    "\1\312\22\7\3\0\4\7\1\0\1\7\6\0\1\7"+
    "\12\0\2\7\4\0\11\7\3\0\20\7\1\313\6\7"+
    "\3\0\4\7\102\0\1\314\51\0\1\315\133\0\1\316"+
    "\1\0\1\7\6\0\1\7\12\0\2\7\4\0\11\7"+
    "\3\0\17\7\1\317\7\7\3\0\4\7\102\0\1\320"+
    "\50\0\1\321\134\0\1\322\102\0\1\323\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10586];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\2\11\4\1\1\11\1\1\7\11\3\1\1\11"+
    "\6\1\2\11\14\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\0\1\11\1\0\3\1\1\0\3\11\26\1\1\11"+
    "\1\0\1\11\2\0\25\1\5\0\24\1\5\0\16\1"+
    "\6\0\11\1\7\0\6\1\7\0\5\1\4\11\3\0"+
    "\3\1\3\0\2\1\2\0\1\11\1\1\1\11\2\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[211];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	public Symbol token (int tokenType) {
	    System.out.println(yytext());
	    return new Symbol(tokenType,yytext());
	}
    StringBuffer out = new StringBuffer();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Laxer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { out.append("T_INTLITERAL " + yytext() +"\n");
            }
            // fall through
          case 62: break;
          case 2:
            { System.out.print(yytext());
            }
            // fall through
          case 63: break;
          case 3:
            { /*ignore*/
            }
            // fall through
          case 64: break;
          case 4:
            { out.append("!\n");
            }
            // fall through
          case 65: break;
          case 5:
            { out.append("T_ID " + yytext() +"\n");
            }
            // fall through
          case 66: break;
          case 6:
            { out.append("%\n");
            }
            // fall through
          case 67: break;
          case 7:
            { out.append("(\n");
            }
            // fall through
          case 68: break;
          case 8:
            { out.append(")\n");
            }
            // fall through
          case 69: break;
          case 9:
            { out.append("*\n");
            }
            // fall through
          case 70: break;
          case 10:
            { out.append("+\n");
            }
            // fall through
          case 71: break;
          case 11:
            { out.append(",\n");
            }
            // fall through
          case 72: break;
          case 12:
            { out.append("-\n");
            }
            // fall through
          case 73: break;
          case 13:
            { out.append(".\n");
            }
            // fall through
          case 74: break;
          case 14:
            { out.append("/\n");
            }
            // fall through
          case 75: break;
          case 15:
            { out.append(";\n");
            }
            // fall through
          case 76: break;
          case 16:
            { out.append("<\n");
            }
            // fall through
          case 77: break;
          case 17:
            { out.append("=\n");
            }
            // fall through
          case 78: break;
          case 18:
            { out.append(">\n");
            }
            // fall through
          case 79: break;
          case 19:
            { out.append("[\n");
            }
            // fall through
          case 80: break;
          case 20:
            { out.append("]\n");
            }
            // fall through
          case 81: break;
          case 21:
            { out.append("{\n");
            }
            // fall through
          case 82: break;
          case 22:
            { out.append("}\n");
            }
            // fall through
          case 83: break;
          case 23:
            { out.append("!=\n");
            }
            // fall through
          case 84: break;
          case 24:
            { out.append("&&\n");
            }
            // fall through
          case 85: break;
          case 25:
            { out.append("T_DOUBLELITERAL "+ yytext() +"\n");
            }
            // fall through
          case 86: break;
          case 26:
            { out.append("<=\n");
            }
            // fall through
          case 87: break;
          case 27:
            { out.append("==\n");
            }
            // fall through
          case 88: break;
          case 28:
            { out.append(">=\n");
            }
            // fall through
          case 89: break;
          case 29:
            { out.append("if\n");
            }
            // fall through
          case 90: break;
          case 30:
            { out.append("||\n");
            }
            // fall through
          case 91: break;
          case 31:
            { out.append("T_STRINGLITERAL " + yytext() +"\n");
            }
            // fall through
          case 92: break;
          case 32:
            { out.append("for\n");
            }
            // fall through
          case 93: break;
          case 33:
            { out.append("int\n");
            }
            // fall through
          case 94: break;
          case 34:
            { out.append("new\n");
            }
            // fall through
          case 95: break;
          case 35:
            { out.append("bool\n");
            }
            // fall through
          case 96: break;
          case 36:
            { out.append("else\n");
            }
            // fall through
          case 97: break;
          case 37:
            { out.append("null\n");
            }
            // fall through
          case 98: break;
          case 38:
            { out.append("this\n");
            }
            // fall through
          case 99: break;
          case 39:
            { out.append("T_BOOLEANLITERAL true\n");
            }
            // fall through
          case 100: break;
          case 40:
            { out.append("void\n");
            }
            // fall through
          case 101: break;
          case 41:
            { out.append("Print\n");
            }
            // fall through
          case 102: break;
          case 42:
            { out.append("break\n");
            }
            // fall through
          case 103: break;
          case 43:
            { out.append("class\n");
            }
            // fall through
          case 104: break;
          case 44:
            { out.append("T_BOOLEANLITERAL false\n");
            }
            // fall through
          case 105: break;
          case 45:
            { out.append("while\n");
            }
            // fall through
          case 106: break;
          case 46:
            { out.append("double\n");
            }
            // fall through
          case 107: break;
          case 47:
            { out.append("return\n");
            }
            // fall through
          case 108: break;
          case 48:
            { out.append("string\n");
            }
            // fall through
          case 109: break;
          case 49:
            { out.append("extends\n");
            }
            // fall through
          case 110: break;
          case 50:
            { out.append("NewArray\n");
            }
            // fall through
          case 111: break;
          case 51:
            { out.append("ReadLine\n");
            }
            // fall through
          case 112: break;
          case 52:
            { out.append("‫‪btoi‬‬\n");
            }
            // fall through
          case 113: break;
          case 53:
            { out.append("‫‪dtoi‬‬\n");
            }
            // fall through
          case 114: break;
          case 54:
            { out.append("‫‪itob‬‬\n");
            }
            // fall through
          case 115: break;
          case 55:
            { out.append("‫‪itod‬‬\n");
            }
            // fall through
          case 116: break;
          case 56:
            { out.append("interface\n");
            }
            // fall through
          case 117: break;
          case 57:
            { out.append("implements\n");
            }
            // fall through
          case 118: break;
          case 58:
            { out.append("‫‪public‬‬\n");
            }
            // fall through
          case 119: break;
          case 59:
            { out.append("ReadInteger\n");
            }
            // fall through
          case 120: break;
          case 60:
            { out.append("‫‪private\n");
            }
            // fall through
          case 121: break;
          case 61:
            { out.append("‫‪protected‬‬\n");
            }
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Laxer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Laxer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Laxer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
